y.j <-c(6,6,5,5,4,4,3,3,2,2)
lm(y.j ~ x.j)
(cov(x.j,y.j)/var(x.j))*mean(x.j)
(cov(x.j,y.j)/var(x.j))
summary(lm(y.j ~ x.j))
x.j <-c(2,2,3,3,4,4,5,5,6,6)
y.j <-c(6,6,5,5,4,4,3,3,2,2)
summary(lm(y.j ~ x.j))
x.j <-c(2,2,3,3,4,4,5,5,6,6)
y.j <-c(6,6,5,5,4,4,3,3,2,2)
mean(y.j) - (cov(x.j,y.j)/var(x.j))*mean(x.j)
summary(lm(y.j ~ x.j))
x.j <-c(2,3,4,5,6)
y.j <-c(6,5,4,3,2)
mean(y.j) - (cov(x.j,y.j)/var(x.j))*mean(x.j)
summary(lm(y.j ~ x.j))
data <- data.frame(
j = c(1,1,2,2,3,3,4,4,5,5)
x = c(1,3,2,4,3,5,4,6,5,7)
data <- data.frame(
j = c(1,1,2,2,3,3,4,4,5,5),
x = c(1,3,2,4,3,5,4,6,5,7),
y = c(5,7,4,6,3,5,2,4,1,3),
x.j =  c(2,2,3,3,4,4,5,5,6,6),
y.j = c(6,6,5,5,4,4,3,3,2,2)
)
# Make the j nominal
data$j <- factor(data$j)
# Glimpse your data
glimpse(data)
# Run Total Regression
summary(lm(y~x, data))
# Create between groups estimations
data %>%
group_by(j) %>%
mutate(x.j = mean(x))
# Create between groups estimations
data %>%
group_by(j) %>%
mutate(x.j = mean(x),
y.j = mean(y))
data <- data.frame(
j = c(1,1,2,2,3,3,4,4,5,5),
x = c(1,3,2,4,3,5,4,6,5,7),
y = c(5,7,4,6,3,5,2,4,1,3),
)
# Glimpse your data
glimpse(data)
# Run Total Regression
summary(lm(y~x, data))
# Run a Between Groups Regression
summary(lm(y.j~x.j, data))
data
lm(y.j~x.j, data)
# Run a Between Groups Regression
summary(lm(y.j~x.j, data))
# Run a Within Groups Regression
summary(lm(y~x + j, data))
# Run Total Regression
summary(lm(y~x, data))
# Run a Between Groups Regression
summary(lm(y.j~x.j, data))
# Run a Within Groups Regression
summary(lm(y~x + j, data))
data
# Load necessary library
library(ggplot2)
# Sample data creation
set.seed(42)
data <- data.frame(
numeric_predictor = rnorm(100),
group_predictor = factor(sample(c("Group 1", "Group 2", "Group 3"), 100, replace = TRUE)),
response = rnorm(100)
)
data$response <- 5 + 2 * data$numeric_predictor +
ifelse(data$group_predictor == "Group 1", 1, 0) +
ifelse(data$group_predictor == "Group 2", 2, 0) +
rnorm(100)
# Fit the model
model <- lm(response ~ numeric_predictor + group_predictor, data = data)
# Create a grid for prediction
grid <- expand.grid(
numeric_predictor = seq(min(data$numeric_predictor), max(data$numeric_predictor), length.out = 100),
group_predictor = levels(data$group_predictor)
)
grid$response <- predict(model, newdata = grid)
# Plot
ggplot(data, aes(x = numeric_predictor, y = response, color = group_predictor)) +
geom_point(alpha = 0.5) +  # Scatter plot of actual data
geom_line(data = grid, aes(y = response), size = 1) +  # Regression lines
labs(title = "Multiple Regression with Numeric and Group Predictor",
x = "Numeric Predictor",
y = "Response") +
theme_minimal()
# Load in packages
library(MASS)
# Load in the data
data <- anorexia
# View the current contrasts of treatment in data
contrasts(data$Treat)
names(data)
# Run a regression
summary(lm(Treat ~ Prewt + Postwt, data))
# Run a regression
summary(lm(Postwt ~ Treat, data))
# Change the contrasts (first time)
m1 <- matrix(nrow = 3, ncol = 2,
c(-1/2, 1, -1/2,
-1/2, -1/2, 1))
contrast(data$Treat) <- m
contrast(data$Treat) <- m1
contrasts(data$Treat) <- m1
contrasts(data$Treat)
# Run a regression
summary(lm(Postwt ~ Treat, data))
# Load in the data
data <- anorexia
# View the current contrasts of treatment in data
contrasts(data$Treat)
# Run a regression
summary(lm(Postwt ~ Treat, data))
# Load in packages
library(MASS)
# Load in the data
data <- anorexia
# View the current contrasts of treatment in data
contrasts(data$Treat)
# Run a regression
summary(lm(Postwt ~ Treat, data))
# Run a regression
summary(lm(Postwt - Prewt ~ Treat, data))
# Load in packages
library(MASS)
# Load in the data
data <- anorexia
# View the current contrasts of treatment in data
contrasts(data$Treat)
# Run a regression
summary(lm(Postwt - Prewt ~ Treat, data))
# Change the contrasts (first time)
m1 <- matrix(nrow = 3, ncol = 2,
c(-1, 1, 0,
-1, 0, 1))
contrasts(data$Treat) <- m1
# Run a regression
summary(lm(Postwt - Prewt ~ Treat, data))
data$Treat
# Load in the data
data <- anorexia
# View the current contrasts of treatment in data
contrasts(data$Treat)
libido<-c(3,2,1,1,4,5,2,4,2,3,7,4,5,3,6)
dose<-gl(3,5, labels = c("Placebo", "Low Dose", "High Dose"))
viagraData<-data.frame(dose, libido)
viagraData
# Run a one-way ANOVA
newModel<-aov(libido ~ dose, data = viagraData))
viagraData
# Run a one-way ANOVA
newModel<-aov(libido ~ dose, data = viagraData))
# Run a one-way ANOVA
newModel<-aov(libido ~ dose, data = viagraData)
newModel
# obtain the summary
summary(newModel)
# plot the model
plot(newModel)
# obtain the summary
summary(newModel)
summary.lm(newModel)
# Dummy dataset
set.seed(123)
data <- data.frame(
Subject = factor(rep(1:10, each = 5)),   # 10 subjects, each with 5 observations
Group = factor(rep(c("Control", "Treatment"), each = 25)),  # Two groups: Control and Treatment
Time = rep(1:5, times = 10),             # Repeated measurements at 5 time points
Score = c(rnorm(25, mean = 50, sd = 10), rnorm(25, mean = 55, sd = 10))  # Scores
)
# View the data
head(data)
library(lme4)
# Laod in packages
library(tidyverse)
# Create a predictor variable that indicates the average for score for each grou
data <- data %>%
group_by(Group) %>%
mutate(mean.score = mean(Score))
data
data <- data.frame(
Subject = factor(rep(1:10, each = 5)),   # 10 subjects, each with 5 observations
Group = factor(rep(c("Control", "Treatment"), each = 25)),  # Two groups: Control and Treatment
Time = rep(1:5, times = 10),             # Repeated measurements at 5 time points
Score = c(rnorm(25, mean = 50, sd = 10), rnorm(25, mean = 55, sd = 10))  # Scores
) %>%
data.frame()
# Create a predictor variable that indicates the average for score for each grou
data <- data %>%
group_by(Group) %>%
mutate(mean.score = mean(Score))
data
data <- data.frame(
Subject = factor(rep(1:10, each = 5)),   # 10 subjects, each with 5 observations
Group = factor(rep(c("Control", "Treatment"), each = 25)),  # Two groups: Control and Treatment
Time = rep(1:5, times = 10),             # Repeated measurements at 5 time points
Score = c(rnorm(25, mean = 50, sd = 10), rnorm(25, mean = 55, sd = 10))  # Scores
)
data
# Create a predictor variable that indicates the average for score for each grou
data <- data %>%
group_by(Group) %>%
mutate(mean.score = mean(Score))
data
view(data)
# Run a linear mixed effects model
mlm.model <- lmer(Score ~ Score + mean.score, data data)
# Run a linear mixed effects model
mlm.model <- lmer(Score ~ Score + mean.score, data = data)
# Run a linear mixed effects model
mlm.model <- lmer(Score ~ Score + mean.score + (1|Group) , data = data)
# Obtain the summary
summary(mlm.model)
data
# Dummy dataset
set.seed(123)
data <- data.frame(
Subject = factor(1:30),                  # 30 subjects
School = factor(rep(1:3, each = 10)),    # Grouping variable: 3 schools
Predictor = rnorm(30, mean = 5, sd = 2), # Numeric predictor variable
Outcome = rnorm(30, mean = 50, sd = 10)  # Numeric outcome variable
)
# View the data
head(data)
# View the data
data
# Create a level two predictor from the means of the level 1 predictor
data <- data %>%
group_by(School) %>%
summarise(mean.Predictor = mean(Predictor))
data
# Dummy dataset
set.seed(123)
data <- data.frame(
Subject = factor(1:30),                  # 30 subjects
School = factor(rep(1:3, each = 10)),    # Grouping variable: 3 schools
Predictor = rnorm(30, mean = 5, sd = 2), # Numeric predictor variable
Outcome = rnorm(30, mean = 50, sd = 10)  # Numeric outcome variable
)
# View the data
data
# Create a level two predictor from the means of the level 1 predictor
data <- data %>%
group_by(School) %>%
mutate(mean.Predictor = mean(Predictor))
data
# Create the first model
m1 <- lmer(Outcome ~ Predictor + mean.Predictor + (1|School), data)
m2 <- lmer(Outcome ~ (Predictor - mean.Predictor) + mean.Predictor + (1|School), data)
m3 <- lmer(Outcome ~ (Predictor - mean(Predictor)) + mean.Predictor + (1|School), data)
# Create other important variables
data <- data %>%
mutate(Predictor.gmc = Predictor - mean(Predictor),
Predicor.jmc = Predictor - mean.Predictor))
# Create other important variables
data <- data %>%
mutate(Predictor.gmc = Predictor - mean(Predictor),
Predicor.jmc = Predictor - mean.Predictor)
data
# Create the first model
m1 <- lmer(Outcome ~ Predictor + mean.Predictor + (1|School), data)
m2 <- lmer(Outcome ~ Predictor.gmc  + mean.Predictor + (1|School), data)
m3 <- lmer(Outcome ~ Predictor.jmc + mean.Predictor + (1|School), data)
# Create other important variables
data <- data %>%
mutate(Predictor.gmc = Predictor - mean(Predictor),
Predictor.jmc = Predictor - mean.Predictor)
# Dummy dataset
set.seed(123)
data <- data.frame(
Subject = factor(1:30),                  # 30 subjects
School = factor(rep(1:3, each = 10)),    # Grouping variable: 3 schools
Predictor = rnorm(30, mean = 5, sd = 2), # Numeric predictor variable
Outcome = rnorm(30, mean = 50, sd = 10)  # Numeric outcome variable
)
# View the data
data
# Create a level two predictor from the means of the level 1 predictor
data <- data %>%
group_by(School) %>%
mutate(mean.Predictor = mean(Predictor))
# Create other important variables
data <- data %>%
mutate(Predictor.gmc = Predictor - mean(Predictor),
Predictor.jmc = Predictor - mean.Predictor)
# Create the first model
m1 <- lmer(Outcome ~ Predictor + mean.Predictor + (1|School), data)
m2 <- lmer(Outcome ~ Predictor.gmc  + mean.Predictor + (1|School), data)
m3 <- lmer(Outcome ~ Predictor.jmc + mean.Predictor + (1|School), data)
# Obtain their summaries
summary(m1)
summary(m2)
summary(m3)
epldat <- read.csv("C:\\Program Files (x86)\\JASP\\resources\\Data Sets\\Data Library\\3. ANOVA\\Erotic Pictures and Love.csv", row.names = NULL)
epldat <- read.delim("https://raw.githubusercontent.com/jasp-stats/jasp-data-library/main/Erotic%20Pictures%20and%20Love/Erotic%20Pictures%20and%20Love.csv", sep = ",")
library(tidyr)      # tidy messy data
library(dplyr)      # data manipulation
library(magrittr)   # using the pipe operator
library(ggplot2)    # pretty plots and graphics
library(readxl)     # read .xls or .xlsx files
library(data.table) # faster aggregation of large data
library(stats)      # broad package; some useful plot/distribution functions
library(sjPlot)     # create pretty tables and plots
library(tidyr)      # tidy messy data
library(dplyr)      # data manipulation
library(magrittr)   # using the pipe operator
library(ggplot2)    # pretty plots and graphics
library(readxl)     # read .xls or .xlsx files
library(data.table) # faster aggregation of large data
library(stats)      # broad package; some useful plot/distribution functions
library(sjPlot)     # create pretty tables and plots
library(car)        # includes Levene's test, Type II SS, and Type III SS
library(olsrr)      # more functions for OLS regression, including Breusch-Pagan homoscedasticity test
library(emmeans)    # extract expected marginal means
library(tidyr)      # tidy messy data
library(dplyr)      # data manipulation
library(magrittr)   # using the pipe operator
library(ggplot2)    # pretty plots and graphics
library(readxl)     # read .xls or .xlsx files
library(data.table) # faster aggregation of large data
library(stats)      # broad package; some useful plot/distribution functions
library(sjPlot)     # create pretty tables and plots
library(car)        # includes Levene's test, Type II SS, and Type III SS
library(olsrr)      # more functions for OLS regression, including Breusch-Pagan homoscedasticity test
library(emmeans)    # extract expected marginal means
epldat <- read.delim("https://raw.githubusercontent.com/jasp-stats/jasp-data-library/main/Erotic%20Pictures%20and%20Love/Erotic%20Pictures%20and%20Love.csv", sep = ",")
epldat                # view the data
dim(epldat)
glimpse(epldat)
epldat <- read.delim("https://raw.githubusercontent.com/jasp-stats/jasp-data-library/main/Erotic%20Pictures%20and%20Love/Erotic%20Pictures%20and%20Love.csv", sep = ",")
glimpse(epldat)       # glimpse the data
summary(epldat)       # examine data summaries
lapply(epldat, class) # check variable classes; ensure that the IV is a factor, DV is continuous for one-way ANOVA
epldat <- epldat %>%  mutate(Gender = factor(x = Gender),
Condition = factor(x = Condition),
Male = factor(x = Gender),
Female = factor(x = Gender),
Nude = factor(x = Condition),
Abstract = factor(x = Condition))
#use the ifelse() function to recode into binary variables easily
epldat <- epldat %>%  mutate(Male = ifelse(Male=="Male", 1, 0),
Female = ifelse(Female=="Female", 1, 0),
Nude = ifelse(Nude=="Nudes", 1, 0),
Abstract = ifelse(Abstract=="Abstract Art", 1, 0))
epldat
glimpse(epldat)
summary(epldat)
hist(epldat$AveragePleasantness)
qqnorm(epldat$AveragePleasantness)
ggplot(data = epldat, aes(x = AveragePleasantness)) +
geom_histogram(binwidth = .5) +
theme_bw() +
labs(caption = "Figure 1: Distribution of AveragePleasantness") +
theme(
plot.caption =  element_text(hjust = 0, size = 15),
panel.grid.major =  element_blank(),
panel.grid.minor = element_blank()
) +
xlab("AveragePleasantness") +
ylab("Frequency")
ggplot(data = epldat, aes(x = Condition, y = AveragePleasantness)) +
geom_violin() +
geom_boxplot(alpha = 0) +
geom_jitter(width = .1) +
theme_light() +
labs(caption = "Figure 2a: Average Pleasantness by Condition") +
ylab("Heart Rate") +
theme(
plot.caption =  element_text(hjust = 0, size = 15),
panel.grid.major =  element_blank(),
panel.grid.minor = element_blank()
)
ggplot(data = epldat, aes(x = Condition, y = AveragePleasantness)) +
geom_violin() +
geom_boxplot(alpha = 0) +
geom_jitter(width = .1) +
theme_light() +
labs(caption = "Figure 2b: Average Pleasantness by Condition and Gender") +
ylab("Heart Rate") +
facet_grid(.~Gender) +
theme(
plot.caption =  element_text(hjust = 0, size = 15),
panel.grid.major =  element_blank(),
panel.grid.minor = element_blank()
)
# Model 6 from Slideset 6; this is the fully restricted model, or the null model
model_6 <- lm(AveragePleasantness ~ 1, data = epldat)
# Model 1 from Slideset 6; this is the full model
model_1 <- lm(AveragePleasantness ~ Male * Abstract, data = epldat)
epldat
summary(lm(AveragePleasantness ~ Abstract:Male, data = epldat))
# Model 3a from Slideset 6 (remember, this model drops a main effect term but includes the interaction term. It is not an appropriate model to code and is only used for comparison, so we won't actually estimate it. Instead, it will be computed "behind the scenes" for the model comparisons using Type III SS). As a reminder, this is what it is doing behind the scenes.
model_3a <- lm(AveragePleasantness ~ Male + Abstract:Male, data = epldat)
# Model 3b from Slideset 6 (similar to Model 3a, will only be computed "behind the scenes" for the model comparisons using Type III SS)
model_3b <- lm(AveragePleasantness ~ Abstract + Abstract:Male, data = epldat)
model_3a
lm(AveragePleasantness ~ Male + Abstract:Male, data = epldat)
summary(model_3a)
# Model 2 from Slideset 6
model_2 <- lm(AveragePleasantness ~ Male + Abstract, data = epldat) # Called main effects model
# Model 3a from Slideset 6 (remember, this model drops a main effect term but includes the interaction term. It is not an appropriate model to code and is only used for comparison, so we won't actually estimate it. Instead, it will be computed "behind the scenes" for the model comparisons using Type III SS). As a reminder, this is what it is doing behind the scenes.
model_3a <- lm(AveragePleasantness ~ Male + Abstract:Male, data = epldat)
# Model 3b from Slideset 6 (similar to Model 3a, will only be computed "behind the scenes" for the model comparisons using Type III SS)
model_3b <- lm(AveragePleasantness ~ Abstract + Abstract:Male, data = epldat)
# Model 4 from Slideset 6
model_4 <- lm(AveragePleasantness ~ Male, data = epldat)
# Model 5 from Slideset 6
model_5 <- lm(AveragePleasantness ~ Abstract, data = epldat)
model_1_type3 <- lm(AveragePleasantness ~ Abstract * Male, data = epldat) %>% Anova(type = 'III')
#alternatively, if we have already created the lm() object, we can simply replace the first part of the above code with the lm() object's name. This simplifies code in the long run.
model_1_type3 <- model_1 %>% Anova(type = 'III')
model_1_type3
model_1_type3
lm(AveragePleasantness ~ Abstract * Male, data = epldat) %>% Anova(type = 'III')
model_1 %>% Anova(type = 'III')
model_1_type2 <- model_1 %>% Anova(type = 'II')
model_1_type2
model_1_type3
model_1_type2
model_1_type3 <- model_1 %>% Anova(type = 'III')
model_2_type3 <- model_2 %>% Anova(type = 'III')
model_4_type3 <- model_4 %>% Anova(type = 'III')
model_5_type3 <- model_5 %>% Anova(type = 'III')
model_6_type3 <- model_6 %>% Anova(type = 'III')
model_1
model_1_type3 <- model_1 %>% Anova(type = 'III')
model_2_type3 <- model_2 %>% Anova(type = 'III')
model_4_type3 <- model_4 %>% Anova(type = 'III')
model_5_type3 <- model_5 %>% Anova(type = 'III')
model_6_type3 <- model_6 %>% Anova(type = 'III')
anova(model_6_type3, model_2_type3, model_1_type3)
anova(model_6_type3, model_2_type3, model_1_type3)
anova(model_6 model_2, model_1)
anova(model_6, model_2, model_1)
summary(model_2)
summary(model_1_type3)
summary(model_1)
print("FULL MODEL")
summary(model_1)
summary(model_1)
summary(model_1_type3)
summary(model_1)
model_1_type3
model_1
model_1_type3
unsummary(model_1_type3)
model_1_type3
summary(model_1_type3)
summary(model_1)
model_1_type3
model_1_type3
summary(model_1)
anova(model_6, model_2, model_1) # It likes this
anova(model_6, model_4, model_2, model_1) # It likes this, this is Type 1 SS
print("FULL MODEL")
summary(model_1)
model_1
anova(model_6, model_4, model_2, model_1) # It likes this, this is Type 1 SS
summary(model_1)
hist(model_1$residuals)
plot(model_1, which = c(1,2)) #selects only the first two plots from the plot function
shapiro.test(resid(model_1))
leveneTest(model_1, center = median) # using center=median a test more robust test to nonnormality
model_1
ols_test_breusch_pagan(model_1)
leveneTest(model_1, center = median) # using center=median a test more robust test to nonnormality
leveneTest(model_1$residuals, center = median) # using center=median a test more robust test to nonnormality
model_1$residuals
leveneTest(resid(model_1), center = median) # using center=median a test more robust test to nonnormality
resid(model_1)
leveneTest(resid(model_1), center = median) # using center=median a test more robust test to nonnormality
library(furniture)
table1(epldat, AveragePleasantness, splitby = "Abstract") #raw means
emmeans(model_2, specs = "Abstract") #versus estimated marginal means
emmeans(model_1, specs = "Male")
table1(epldat, AveragePleasantness, splitby = "Abstract") #raw means
emmeans(model_2, specs = "Abstract") #versus estimated marginal means
emmeans(model_1, specs = "Male")
emmeans(model_2, specs = "Abstract") #versus estimated marginal means
emmeans(model_1, specs = "Male")
model_factor <- lm(AveragePleasantness ~ Condition * Gender, data = epldat)
model_am <- lm(AveragePleasantness ~ Abstract * Male, data = epldat)
model_af <- lm(AveragePleasantness ~ Abstract * Female, data = epldat)
model_nm <- lm(AveragePleasantness ~ Nude * Male, data = epldat)
model_nf <- lm(AveragePleasantness ~ Nude * Female, data = epldat)
tab_model(model_factor, model_am, model_af, model_nm, model_nf) #create pretty html table of multiple model results
contrasts(epldat$Gender) = contr.sum
model_factor <- model_1 %>% Anova(type = 'III')
summary(model_1_type3)
contrasts(epldat$Gender)
contrasts(epldat$Gender)
model_factor <- model_1 %>% Anova(type = 'III')
summary(model_1_type3)
contr.sum
contrasts(epldat$Gender)
model_factor <- model_1 %>% Anova(type = 'III')
model_factor
summary(model_1_type3)
model_factor
model_1_type3
model_factor
model_factor
summary(model_1_type3)
model_1_type3
