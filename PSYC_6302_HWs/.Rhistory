extraversion_z = scale(extraversion, center=T, scale=T),
neuroticism_z = scale(neuroticism, center=T, scale=T))
summary(dat) #descriptives show that no value surpasses our criteria. However, if any did, the below code would remove those values that do surpass criteria.
dat <- dat[which(dat$extraversion_z<4 & dat$extraversion_z>-4,
dat$neuroticism_z<4 & dat$neuroticism_z>-4),]
glimpse(dat)
ggplot(data = dat, aes(y = extraversion_z)) + geom_boxplot()
ggplot(data = dat, aes(y = neuroticism_z)) + geom_boxplot()
dat$volunteer_num <- ifelse(dat$volunteer == "yes", 1,
ifelse(dat$volunteer == "no", 0, NA))
summary(dat$volunteer_num)
dat <- dat %>% mutate(extraversion_c = scale(extraversion, center=T, scale=F),
neuroticism_c = scale(neuroticism, center=T, scale=F))
m1 <- glm(volunteer2 ~ sex + neuroticism + extraversion,
data = dat,
family = "binomial"(link = "logit"))
library(tidyr)      # tidy messy data
library(dplyr)      # data manipulation
library(magrittr)   # using the pipe operator
library(ggplot2)    # pretty plots and graphics
library(readxl)     # read .xls or .xlsx files
library(data.table) # faster aggregation of large data
library(stats)      # some useful plot/distribution functions
library(sjPlot)     # create pretty tables
library(car)        # Levene's test, Type II SS, and Type III SS, dataset today
library(olsrr)      # more functions for OLS regression
library(corrplot)   # visualize correlations
library(emmeans)    # extract expected marginal means
library(ggpubr)     # create publication ready plots
library(rstatix)    # pipe-friendly R functions for easy analysis
library(ggeffects)  # predict simple slopes easily
library(MVN)        # check multivariate normality
library(regclass)   # VIF
library(aod)        # analysis of overdispersed data
dat <- Cowles
glimpse(dat)
dat_num <- dat %>% mutate(sex_num = as.integer(sex),
volunteer_num = as.integer(volunteer))
dat_num <- select_if(dat_num, is.numeric)
summary(dat)
cor(dat_num, method = "spearman") %>% round(., 2)
xtabs(~volunteer + sex, data = dat)
var(dat$extraversion)
aggregate(extraversion ~ volunteer + sex, data = dat, FUN = var)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)      # tidy messy data
library(dplyr)      # data manipulation
library(magrittr)   # using the pipe operator
library(ggplot2)    # pretty plots and graphics
library(readxl)     # read .xls or .xlsx files
library(data.table) # faster aggregation of large data
library(stats)      # some useful plot/distribution functions
library(sjPlot)     # create pretty tables
library(car)        # Levene's test, Type II SS, and Type III SS, dataset today
library(olsrr)      # more functions for OLS regression
library(corrplot)   # visualize correlations
library(emmeans)    # extract expected marginal means
library(ggpubr)     # create publication ready plots
library(rstatix)    # pipe-friendly R functions for easy analysis
library(ggeffects)  # predict simple slopes easily
library(MVN)        # check multivariate normality
library(regclass)   # VIF
library(aod)        # analysis of overdispersed data
dat <- Cowles
glimpse(dat)
dat_num <- dat %>% mutate(sex_num = as.integer(sex),
volunteer_num = as.integer(volunteer))
dat_num <- select_if(dat_num, is.numeric)
summary(dat)
cor(dat_num, method = "spearman") %>% round(., 2)
xtabs(~volunteer + sex, data = dat)
var(dat$extraversion)
aggregate(extraversion ~ volunteer + sex, data = dat, FUN = var)
var(dat$neuroticism)
aggregate(neuroticism ~ volunteer + sex, data = dat, FUN = var)
dat <- mutate(dat,
extraversion_z = scale(extraversion, center=T, scale=T),
neuroticism_z = scale(neuroticism, center=T, scale=T))
summary(dat) #descriptives show that no value surpasses our criteria. However, if any did, the below code would remove those values that do surpass criteria.
dat <- dat[which(dat$extraversion_z<4 & dat$extraversion_z>-4,
dat$neuroticism_z<4 & dat$neuroticism_z>-4),]
glimpse(dat)
ggplot(data = dat, aes(y = extraversion_z)) + geom_boxplot()
ggplot(data = dat, aes(y = neuroticism_z)) + geom_boxplot()
dat$volunteer_num <- ifelse(dat$volunteer == "yes", 1,
ifelse(dat$volunteer == "no", 0, NA))
summary(dat$volunteer_num)
dat <- dat %>% mutate(extraversion_c = scale(extraversion, center=T, scale=F),
neuroticism_c = scale(neuroticism, center=T, scale=F))
m1 <- glm(volunteer2 ~ sex + neuroticism + extraversion,
data = dat,
family = "binomial"(link = "logit"))
stabs(~volunteer + neuroticism, data = dat)
xtabs(~volunteer + neuroticism, data = dat)
xtabs(~volunteer + sex + neuroticism, data = dat)
xtabs(~volunteer + neuroticism, data = dat)
var(dat$neuroticism)
aggregate(neuroticism ~ volunteer + sex, data = dat, FUN = var)
var(dat$extraversion)
aggregate(extraversion ~ volunteer + sex, data = dat, FUN = var)
var(dat$neuroticism)
aggregate(neuroticism ~ volunteer + sex, data = dat, FUN = var)
var(dat$neuroticism)
aggregate(neuroticism ~ volunteer + sex, data = dat, FUN = var)
aggregate(neuroticism ~ volunteer + sex, data = dat, FUN = mean)
aggregate(neuroticism ~ volunteer + sex, data = dat, FUN = var)
aggregate(neuroticism ~ volunteer + sex, data = dat, FUN = sd)
aggregate(neuroticism ~ volunteer + sex, data = dat, FUN = var)
dat <- mutate(dat,
extraversion_z = scale(extraversion, center=T, scale=T),
neuroticism_z = scale(neuroticism, center=T, scale=T))
summary(dat) #descriptives show that no value surpasses our criteria. However, if any did, the below code would remove those values that do surpass criteria.
dat <- dat[which(dat$extraversion_z<4 & dat$extraversion_z>-4,
dat$neuroticism_z<4 & dat$neuroticism_z>-4),]
dat
dat <- mutate(dat,
extraversion_z = scale(extraversion, center=T, scale=T),
neuroticism_z = scale(neuroticism, center=T, scale=T))
summary(dat) #descriptives show that no value surpasses our criteria. However, if any did, the below code would remove those values that do surpass criteria.
dat <- dat[which(dat$extraversion_z<4 & dat$extraversion_z>-4,
dat$neuroticism_z<4 & dat$neuroticism_z>-4),]
glimpse(dat)
ggplot(data = dat, aes(y = extraversion_z)) + geom_boxplot()
ggplot(data = dat, aes(y = neuroticism_z)) + geom_boxplot()
dat$volunteer_num <- ifelse(dat$volunteer == "yes", 1,
ifelse(dat$volunteer == "no", 0, NA))
summary(dat$volunteer_num)
dat <- dat %>% mutate(extraversion_c = scale(extraversion, center=T, scale=F),
neuroticism_c = scale(neuroticism, center=T, scale=F))
m1 <- glm(volunteer2 ~ sex + neuroticism + extraversion,
data = dat,
family = "binomial"(link = "logit"))
dat
m1 <- glm(volunteer_num ~ sex + neuroticism + extraversion,
data = dat,
family = "binomial"(link = "logit"))
summary(m1)
tibble(dat)
dat$volunteer_num <- ifelse(dat$volunteer == "yes", 1,
ifelse(dat$volunteer == "no", 0, NA))
summary(dat$volunteer_num)
dat <- dat %>% mutate(extraversion_c = scale(extraversion, center=T, scale=F),
neuroticism_c = scale(neuroticism, center=T, scale=F))
x <- c(1,1,1,1,1,1,1,1,,2,2,2,2,3,3,3)
x <- c(1,1,1,1,1,1,1,1,,2,2,2,2,3,3,3)
x <- c(1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3)
hist(x)
hist(scale(x))
m1 <- glm(volunteer_num ~ sex + neuroticism + extraversion,
data = dat,
family = "binomial"(link = "logit"))
summary(m1)
m2 <- glm(volunteer_num ~ sex + neuroticism + extraversion,
data = dat,
family = "quasibinomial"(link = "logit"))
summary(m2)
m1 <- glm(volunteer2 ~ sex + neuroticism + extraversion,
data = dat,
family = "binomial"(link = "logit"))
m1 <- glm(volunteer_num ~ sex + neuroticism + extraversion,
data = dat,
family = "binomial"(link = "logit"))
summary(m1)
m1_probit <- glm(volunteer_num ~ sex + neuroticism + extraversion,
data = dat,
family = "binomial"(link = "probit"))
summary(m1_probit)
summary(m1)
summary(m1_probit)
m0 <- glm(volunteer2 ~ sex,
data = dat,
family = "binomial"(link = "logit"))
m0 <- glm(volunteer_num ~ sex,
data = dat,
family = "binomial"(link = "logit"))
m1 <- glm(volunteer_num ~ sex + neuroticism_c + extraversion_c,
data = dat,
family = "binomial"(link = "logit"))
m2 <- glm(volunteer_num ~ sex + neuroticism_c + extraversion_c
+ neuroticism_c*extraversion_c,
data = dat,
family = "binomial"(link = "logit"))
m0 <- glm(volunteer_num ~ sex,
data = dat,
family = "binomial"(link = "logit"))
m1 <- glm(volunteer_num ~ sex + neuroticism_c + extraversion_c,
data = dat,
family = "binomial"(link = "logit"))
m2 <- glm(volunteer_num ~ sex + neuroticism_c + extraversion_c
+ neuroticism_c*extraversion_c,
data = dat,
family = "binomial"(link = "logit"))
summary(m2)
test <- anova(m0, m1, m2)
test
test
#test m0 against a null model
chi_n0 <- m0$null.deviance - m0$deviance
df_n0 <- m0$df.null - m0$df.residual
"Deviance from null to Model 0:"
cbind(Chi2 = chi_n0, df = df_n0, p = pchisq(chi_n0, df_n0, lower.tail = FALSE))
#test m0 against a null model
chi_n0 <- m0$null.deviance - m0$deviance
df_n0 <- m0$df.null - m0$df.residual
"Deviance from null to Model 0:"
cbind(Chi2 = chi_n0, df = df_n0, p = pchisq(chi_n0, df_n0, lower.tail = FALSE))
#test m1 against m0
"Deviance from Model 0 Model 1:"
chi_01 <- m0$deviance - m1$deviance
df_01 <- m0$df.residual - m1$df.residual
cbind(Chi2 = chi_01, df = df_01, p = pchisq(chi_01, df_01, lower.tail = FALSE))
#test m2 against m1
"Deviance from Model 1 Model 2:"
chi_12 <- m1$deviance - m2$deviance
df_12 <- m1$df.residual - m2$df.residual
cbind(Chi2 = chi_12, df = df_12, p = pchisq(chi_12, df_12, lower.tail = FALSE))
tab_model(m0, m1, m2, show.ci = .95)
vif(m2)
summary(m2)
confint(m2)
vif(m1)
vif(m2)
vif(m1)
vif(m2)
summary(m2)
confint(m2)
#exponentiated values
exp(cbind(OR = coef(m2), confint(m2)))
#exponentiated values
exp(cbind(OR = coef(m2), CI = confint(m2)))
summary(m2)
tab_model(m0, m1, m2, show.ci = .95)
summary(m2)
confint(m2)
dat
Between_fun <- function(x1, x2, n1, n2, sd1, sd2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
SMD_Between
SE_SMD_Between
}
Between_fun(10,14,100,110,4.5,4.7)
Between_fun <- function(x1, x2, n1, n2, sd1, sd2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
return(SMD_Between)
return(SE_SMD_Between)
}
Between_fun(10,14,100,110,4.5,4.7)
Between_fun <- function(x1, x2, n1, n2, sd1, sd2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
list(SMD_Between,SE_SMD_Between)
}
Between_fun(10,14,100,110,4.5,4.7)
Between_fun(10,14,100,110,4.5,4.7)[1]
Between_fun(10,14,100,110,4.5,4.7)[2]
# return the two values
list(test = SMD_Between,SE_SMD_Between)
```{r calculating effect sizes}
Between_fun <- function(x1, x2, n1, n2, sd1, sd2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
list(test = SMD_Between,SE_SMD_Between)
}
Between_fun(10,14,100,110,4.5,4.7)[2]
Between_fun <- function(x1, x2, n1, n2, sd1, sd2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
list(Effect_Size = SMD_Between, Standard_ErrorSE_SMD_Between)
}
Between_fun(10,14,100,110,4.5,4.7)[2]
Between_fun <- function(x1, x2, n1, n2, sd1, sd2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
list(Effect_Size = SMD_Between, Standard_Error = SE_SMD_Between)
}
Between_fun(10,14,100,110,4.5,4.7)
Between_fun
Between_fun <- function(x1, x2, sd1, sd2, n1, n2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
list(Effect_Size = SMD_Between, Standard_Error = SE_SMD_Between)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(comment = "")
knitr::opts_chunk$set(warning = FALSE)
# Here are some examples of installing packages
# install.packages("tidyverse)
# install.packages("devtools")
# devtools::install_github("MathiasHarrer/dmetar")
# Load in packages
library(tidyverse)
library(dmetar)
library(meta)
library(esc)
library(kableExtra)
# Load in the data
SP <- SuicidePrevention
# get a glimpse (for variable classes)
glimpse(SP)
# Change the names
names(SP) <- c("Author", "Exp.n", "Exp.mean", "Exp.sd", "Ctrl.n", "Ctrl.mean", "Ctrl.sd", "PubYear", "Age_Group", "Control")
# Print the dataset for HTML
SP %>%
kbl() %>%
kable_paper("hover", full_width = F)
Between_fun <- function(x1, x2, sd1, sd2, n1, n2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
list(Effect_Size = SMD_Between, Standard_Error = SE_SMD_Between)
}
Between_fun(10,14,100,110,4.5,4.7)
# Calculates effect size and standard error
# We will need a for loop to accomplish this
# Create a list to save the effect sizes and standard errors
EffectSize_list <- list()
StandardError_list <- list()
# Run the for loop
for(ii in 1:nrow(SP)) {
# Extract the current row
currentRow <- SP[ii,]
# Extract the information we need
m1 = currentRow$Exp.mean
sd1 = currentRow$Exp.sd
n1 = currentRow$Exp.n
m2 = currentRow$Ctrl.mean
sd2 = currentRow$Ctrl.sd
n2 = currentRow$Ctrl.n
# Extract the effect size
EffectSize_list[[ii]] <- esc_mean_sd(m1, sd1, n1,
m2, sd2, n2)[1]
# Extract the standard error
StandardError_list[[ii]] <- esc_mean_sd(m1, sd1, n1,
m2, sd2, n2)[2]
}
# Introduce them into the original dataset
SP$EffectSize <- unlist(do.call(c, EffectSize_list))
SP$StandardError <- unlist(do.call(c, StandardError_list))
# Print it out
SP
Between_fun <- Vectorize(function(x1, x2, sd1, sd2, n1, n2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
list(Effect_Size = SMD_Between, Standard_Error = SE_SMD_Between)
})
x1 <- rnorm(n=10, mean = 12, sd= 2)
x1
x2
x1 <- rnorm(n=10, mean = 12, sd= 2)
x2 <- rnorm(n=10, mean = 12, sd= 2)
x2
n <- rnomr(n =10, mean = 100, sd = 10)
n1 <- rnorm(n =10, mean = 100, sd = 10)
n2 <- rnorm(n =10, mean = 100, sd = 10)
x1 <- rnorm(n=10, mean = 12, sd= 2)
x2 <- rnorm(n=10, mean = 15, sd= 2)
sd1 <- rnorm(n=10, mean = 3, sd= 1)
sd2 <- rnorm(n=10, mean = 3, sd= 1)
n1 <- rnorm(n =10, mean = 100, sd = 10)
n2 <- rnorm(n =10, mean = 100, sd = 10)
# Test out the function
Between_fun(x1,x2,sd1,sd2,n1,n2)
# Test out the function
Between_fun(x1,x2,sd1,sd2,n1,n2)[1]
# Test out the function
Between_fun(x1,x2,sd1,sd2,n1,n2)[[1]]
# Test out the function
Between_fun(x1,x2,sd1,sd2,n1,n2)
# Test out the function
xx <- Between_fun(x1,x2,sd1,sd2,n1,n2)
Between_fun(x1,x2,sd1,sd2,n1,n2)
# Test out the function
xx <- Between_fun(x1,x2,sd1,sd2,n1,n2)
class(xx)
data.frame(xx)
Between_fun(x1,x2,sd1,sd2,n1,n2)
data.frame(xx)
Between_fun <- Vectorize(function(x1, x2, sd1, sd2, n1, n2) {
# Calculate mean difference
mean.dif <- x1 - x2
# Calculate the pooled standard deviation numerator
spool_numerator <- (n1-1)*(sd1^2) + (n2-1)*(sd2^2)
# Calculate the pooled standard deviation denominator
spool_denominator <- (n1-1)*(n2-1)
# Calculate pooled standard deviation
spool_std <- sqrt(spool_numerator/spool_denominator)
# Calculate the standard mean difference
SMD_Between <- mean.dif/spool_std
# Calculate the standard error
SE_SMD_Between <- sqrt((n1+n2)/(n1*n2) + (SMD_Between^2)/(2*(n1+n2)))
# return the two values
return(list(Effect_Size = SMD_Between, Standard_Error = SE_SMD_Between))
})
x1 <- rnorm(n=10, mean = 12, sd= 2)
x2 <- rnorm(n=10, mean = 15, sd= 2)
sd1 <- rnorm(n=10, mean = 3, sd= 1)
sd2 <- rnorm(n=10, mean = 3, sd= 1)
n1 <- rnorm(n =10, mean = 100, sd = 10)
n2 <- rnorm(n =10, mean = 100, sd = 10)
# Test out the function
xx <- Between_fun(x1,x2,sd1,sd2,n1,n2)
data.frame(xx)
xx
as.data.frame(xx)
tibble(xx)
data.frame(xx)
unlist(data.frame(xx))
unlist((xx))
# Test out the function
xx <- Between_fun(SP$Exp.mean,SP$Ctrl.mean,SP$Exp.sd,SP$Ctrl.sd,SP$Exp.n,SP$Ctrl.n)
xx
